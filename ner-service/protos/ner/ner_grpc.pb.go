// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: ner-service/protos/ner.proto

package ner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NERService_ExtractEntities_FullMethodName      = "/ner.NERService/ExtractEntities"
	NERService_BatchExtractEntities_FullMethodName = "/ner.NERService/BatchExtractEntities"
)

// NERServiceClient is the client API for NERService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NERServiceClient interface {
	ExtractEntities(ctx context.Context, in *ExtractEntitiesRequest, opts ...grpc.CallOption) (*ExtractEntitiesResponse, error)
	BatchExtractEntities(ctx context.Context, in *BatchExtractEntitiesRequest, opts ...grpc.CallOption) (*BatchExtractEntitiesResponse, error)
}

type nERServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNERServiceClient(cc grpc.ClientConnInterface) NERServiceClient {
	return &nERServiceClient{cc}
}

func (c *nERServiceClient) ExtractEntities(ctx context.Context, in *ExtractEntitiesRequest, opts ...grpc.CallOption) (*ExtractEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractEntitiesResponse)
	err := c.cc.Invoke(ctx, NERService_ExtractEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nERServiceClient) BatchExtractEntities(ctx context.Context, in *BatchExtractEntitiesRequest, opts ...grpc.CallOption) (*BatchExtractEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchExtractEntitiesResponse)
	err := c.cc.Invoke(ctx, NERService_BatchExtractEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NERServiceServer is the server API for NERService service.
// All implementations must embed UnimplementedNERServiceServer
// for forward compatibility.
type NERServiceServer interface {
	ExtractEntities(context.Context, *ExtractEntitiesRequest) (*ExtractEntitiesResponse, error)
	BatchExtractEntities(context.Context, *BatchExtractEntitiesRequest) (*BatchExtractEntitiesResponse, error)
	mustEmbedUnimplementedNERServiceServer()
}

// UnimplementedNERServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNERServiceServer struct{}

func (UnimplementedNERServiceServer) ExtractEntities(context.Context, *ExtractEntitiesRequest) (*ExtractEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractEntities not implemented")
}
func (UnimplementedNERServiceServer) BatchExtractEntities(context.Context, *BatchExtractEntitiesRequest) (*BatchExtractEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExtractEntities not implemented")
}
func (UnimplementedNERServiceServer) mustEmbedUnimplementedNERServiceServer() {}
func (UnimplementedNERServiceServer) testEmbeddedByValue()                    {}

// UnsafeNERServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NERServiceServer will
// result in compilation errors.
type UnsafeNERServiceServer interface {
	mustEmbedUnimplementedNERServiceServer()
}

func RegisterNERServiceServer(s grpc.ServiceRegistrar, srv NERServiceServer) {
	// If the following call pancis, it indicates UnimplementedNERServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NERService_ServiceDesc, srv)
}

func _NERService_ExtractEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NERServiceServer).ExtractEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NERService_ExtractEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NERServiceServer).ExtractEntities(ctx, req.(*ExtractEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NERService_BatchExtractEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchExtractEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NERServiceServer).BatchExtractEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NERService_BatchExtractEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NERServiceServer).BatchExtractEntities(ctx, req.(*BatchExtractEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NERService_ServiceDesc is the grpc.ServiceDesc for NERService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NERService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ner.NERService",
	HandlerType: (*NERServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractEntities",
			Handler:    _NERService_ExtractEntities_Handler,
		},
		{
			MethodName: "BatchExtractEntities",
			Handler:    _NERService_BatchExtractEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ner-service/protos/ner.proto",
}
