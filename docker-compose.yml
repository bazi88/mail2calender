version: '3.8'

services:
  ner-service:
    build:
      context: ./ner-service
      dockerfile: Dockerfile
    environment:
      - GRPC_PORT=50051
      - METRICS_PORT=8000
      - LOG_LEVEL=INFO
      - DEVICE=cpu # hoặc cuda nếu có GPU
    ports:
      - "50051:50051" # gRPC port
      - "8000:8000" # Metrics port
    volumes:
      - ./ner-service/model:/app/model
      - ./ner-service/config:/app/config
      - ./ner-service/utils:/app/utils
      - model-cache:/root/.cache/huggingface # Cache cho model
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: [ "CMD", "python", "-c", " import grpc; from grpc_health.v1 import health_pb2, health_pb2_grpc; channel = grpc.insecure_channel('localhost:50051'); stub = health_pb2_grpc.HealthStub(channel); response = stub.Check(health_pb2.HealthCheckRequest()); assert response.status == health_pb2.HealthCheckResponse.SERVING " ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - backend
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - server
  server:
    image: "go8/server"
    container_name: "go8_container"
    env_file:
      - .env
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=go8_db
      - OTEL_OTLP_ENDPOINT=${OTEL_OTLP_ENDPOINT:-otel-collector:4317}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - NER_SERVICE_HOST=ner-service
      - NER_SERVICE_PORT=50051
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - ner-service
    networks:
      - app_network
      - backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres:
    image: postgres:17-alpine
    container_name: go8_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: mirror.gcr.io/library/redis:7-alpine
    container_name: go8_redis
    restart: unless-stopped
    command: redis-server
    volumes:
      - redis_data:/data
    networks:
      - app_network
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - DOCKER_CLIENT_TIMEOUT=120
      - COMPOSE_HTTP_TIMEOUT=120

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    user: root

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend

  test-client:
    build:
      context: ./ner-service
      dockerfile: test.Dockerfile
    depends_on:
      - ner-service
    networks:
      - backend

networks:
  app_network:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana-data:
  model-cache:
